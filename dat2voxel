#!/usr/bin/python

import sys
import struct
import os
import mmap
import numpy as np


def unpack(string, file):
    buffer = file.read(struct.calcsize(string))
    return struct.unpack(string, buffer)


def read(path):
    with open(path, "rb") as inp:
        magic, = unpack('i', inp)
        if magic != 1234:
            sys.stderr.write("dat2voxel: error: '%s' not a dat file\n" % path)
            sys.exit(1)
        dim, = unpack('i', inp)
        if dim != 3:
            sys.stderr.write("dat2voxel: error: wrong dimension '%d'\n" % dim)
            sys.exit(1)
        nx, ny, nz, type_id = unpack('iiii', inp)
        seek = inp.tell()
        type_name = {0: "<d", 1: "<f", 2: "<i"}[type_id]
    with open(path, "rb+") as inp:
        mm = mmap.mmap(inp.fileno(), 0)
        dtype = np.dtype(type_name)
        return np.ndarray((nx, ny, nz), dtype, mm, seek, order='F')


def roi(x, y, z):
    x = (x + 0.5) * s - x0
    y = (y + 0.5) * s - y0
    z = (z + 0.5) * s - z0
    return abs(x) < 0.075 and abs(y) < 0.075 and abs(z) < 0.075


path = "c"
xyz_path = "%s.xyz.raw" % path
topo_path = "%s.topo.raw" % path
xdmf_path = "%s.xdmf2" % path
attr_path = "%s.xdmf2" % path
a = read(sys.argv[1])
# b = read(sys.argv[2])
nx, ny, nz = np.shape(a)
x0, y0, z0 = 0.6497946102507519, 0.5908331665234543, 0.3715947899171972
s = 1.0 / nx
nc = 0
nn = 0
with open(xyz_path, "wb") as xyz, open(topo_path,
                                       "wb") as topo, open(attr_path,
                                                           "wb") as attr:
    for (x, y, z), val in np.ndenumerate(a):
        if val != 0 and roi(x, y, z):
            x *= s
            y *= s
            z *= s
            xyz.write(
                struct.pack("<24f", x, y, z, x, y, z + s, x, y + s, z + s, x,
                            y + s, z, x + s, y, z, x + s, y, z + s, x + s,
                            y + s, z + s, x + s, y + s, z))
            topo.write(
                struct.pack("<9q", 9, nn, nn + 1, nn + 2, nn + 3, nn + 4,
                            nn + 5, nn + 6, nn + 7))
            topo.write(struct.pack("<f", val))
            nc += 1
            nn += 8
with open(xdmf_path, "w") as xdmf:
    xdmf.write("""\
<Xdmf>
  <Domain>
    <Grid>
      <Geometry>
        <DataItem
            Dimensions="%d 3"
            Format="Binary">
          %s
        </DataItem>
      </Geometry>
      <Topology
          Dimensions="%d"
          Type="Mixed">
          <DataItem
              DataType="Int"
              Dimensions="%d"
              Format="Binary"
              Precision="8">
            %s
          </DataItem>
      </Topology>
      <Attribute
          Center="Cell">
          <DataItem
             Dimensions="%d" Format="Binary">
           %s
          </DataItem>
      </Attribute>
    </Grid>
  </Domain>
</Xdmf>
""" % (nn, os.path.basename(xyz_path), nc, 9 * nc, os.path.basename(topo_path),
       nc, os.path.basename(attr_path)))
